#+title: A POC of Directed HyperLMNtal 
#+author: Jin SANO

* About
  A minimal implementation of a graph rewriting language Directed HyperLMNtal.

* Project overview

  LOC of the program:
  
  | File            | LOC | Description                                                         |
  |-----------------+-----+---------------------------------------------------------------------|
  | [[findatom.ml]]     |  74 | Performs graph pattern matching                                     |
  | [[parser.mly]]      |  70 | Defines a grammer for parsing                                       |
  | [[util.ml]]         |  52 | Some utility functions                                              |
  | [[breakdown.ml]]    |  52 | Check rule conditions and break down atoms                          |
  | [[pushatom.ml]]     |  46 | Generate and push atoms                                             |
  | [[vm.ml]]           |  45 | Definition of atom and pretty printer for them                      |
  | [[link_check.ml]]   |  44 | Collect link information and check them                             |
  | [[main.ml]]         |  38 | The main execution loop                                             |
  | [[alpha.ml]]        |  34 | Convert local link names to fresh ids and partition atoms and rules |
  | [[lexer.mll]]       |  34 | Defies a token for lexing                                           |
  | [[debug_syntax.ml]] |  32 | Pretty printer for a parsed input for debugging                     |
  | [[debug_vm.ml]]     |  24 | Dumper of atoms for debugging                                       |
  | [[eval.ml]]         |  17 | The evaluater                                                       |
  | [[syntax.ml]]       |   9 | The abstract syntax definition                                      |
  | SUM:            | 570 |                                                                     |

  
* Syntax

** Identifiers
   - Link name :: starts from capital letters or =_=
     - e.g. =X=, =Link123=, =_foo'=
     - we use \(X\) or \(Y\) to denote them in the following description.
   - Atom name[[spec:1] :: starts from capital letters.
     - e.g. =p=, =atom123=, =bar_fooBar'=
     - we use \(p\) or \(q\) to denote them in the following description.
   
** Syntax of a process

   The syntax of a process (program) \(P\) is defined inductive as the following:

   - Null :: \(\emptyset\)
     - This is not allowed to write explicitly by users.
   - Atom :: \(p(X_1, ..., X_n)\) where \(n \leq 0\)
     - The node of a graph
   - Molecule :: \((P, P)\)
   - Link creation :: \(\nu X. P\)
     - Hides link \(X\) in \(P\)
     - \(\nu\) is denoted as =\= in the concrete syntax.
   - Rule :: \((P \vdash Q)\)
     - Defines a rule to reduce graph

       
  [spec:1] =->= is also allowed but not intended for a user to write.

* Implementation
  
** Syntax
  #+NAME: Syntax of Directed HyperLMNtal
  #+begin_src ocaml
    (* argument of an atom *)
    type arg =
      | Atom of string * arg list  (* atom. e.g. a(X, Y) *)
      | Link of string             (* link. e.g. X *)

    (* process *)
    type proc = 
      | Zero
      | Ind of string option * arg  (* indirection. e.g. X -> a(Y) *)
      | Mol of proc * proc          (* molecule. e.g. (P, Q) *)  
      | New of string * proc        (* link creation. e.g. \X.P *)
      | Rule of proc * proc         (* rule. e.g. P :- Q. *)
  #+end_src

** VM
  #+begin_src ocaml
    (* node *)
    type vm_atom =
      | VMAtom of string * node_ref list
      | VMInd of node_ref
     and node_ref = (int * vm_atom) ref  (* (indeg, atom) *)
  #+end_src
  
    
  

  
